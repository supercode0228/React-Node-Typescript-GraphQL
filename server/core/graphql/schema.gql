# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AggregatedSkill {
  skill: Skill!
  strength: Float!
  sortOrder: Float!
  modifiedTime: Float
  userCount: Float!
  strengths: [Float!]
  unavailableCount: Float
}

type AssignedSkill {
  skill: Skill!
  strength: Float!
  sortOrder: Float!
  modifiedTime: Float
}

input AssignedSkillInput {
  skill: String = ""
  strength: Float = 0
  sortOrder: Float = 0
}

type BlogEntry {
  name: String!
  summary: String!
  url: String!
  slug: String!
  thumbnail: BlogEntryThumbnail
  bgColor: String
}

type BlogEntryThumbnail {
  url: String
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

type InvitationInfo {
  team: Team!
  email: String
}

type InvitedUser {
  user: User
  email: String!
  key: String!
}

type Mutation {
  # Creates or updates a team
  updateTeamData(data: TeamInput!): Team!

  # Creates a team removal confirmation and sends instructions to the user
  deleteTeam(id: ID!): Boolean!

  # Updates a team member
  updateTeamMember(data: TeamMemberInput!): Boolean!
  removeTeamMember(teamId: ID = "", userId: ID = ""): Boolean!

  # Invites users to the team
  teamInvite(id: ID!, emails: [String!] = []): Boolean!

  # Creates a shareable team invite link
  teamInviteLink(id: ID!): String!

  # Removes a team invite
  cancelTeamInvite(key: String = ""): Boolean!

  # Creates or updates a team skill type
  updateTeamSkillType(teamId: ID = "", input: TeamSkillTypeInput = {}): TeamSkillType!

  # Deletes a team skill type
  deleteTeamSkillType(teamId: ID = "", id: ID = ""): Boolean!
  updateUserData(data: UserInput!): User!

  # Replace the user's future availabity records with the new ones
  updateUserAvailability(availability: [UserAvailabilityInput!] = []): [UserAvailability!]!
  updateUserTeam(input: UserTeamInput!): Boolean!
  addPersonalNote(msg: String = ""): Boolean!
  removePersonalNote(id: ID = ""): Boolean!
  changePassword(oldPassword: String = "", newPassword: String = ""): Boolean!
  deleteAccount: Boolean!
  requestResetPassword(email: String = ""): Boolean!
  requestAccountActivation: Boolean!

  # Creates or updates user skills and history
  updateUserSkills(type: String = "", skills: [AssignedSkillInput!] = []): [UserSkill!]!

  # Creates a custom skill
  addCustomSkill(data: SkillInput!): Skill!

  # Creates team specific skills
  createTeamSkills(teamId: ID = "", input: TeamSkillsInput = {skills: [], type: ""}): Boolean!

  # Deletes team specific skills
  deleteTeamSkills(teamId: ID = "", ids: [ID!] = []): Boolean!

  # If `id` is not defined, but the `team` is - creates a new project
  updateProjectData(team: String, data: ProjectInput = {}): Project!
  setProjectMembers(projectId: ID = "", users: [ID!] = []): Boolean!
  removeProjectMember(projectId: ID = "", userId: ID = ""): Boolean!
  removeProject(id: ID = ""): Boolean!
}

type PersonalNote {
  id: ID!
  msg: String!
  createdTime: Float!
}

type Project {
  id: ID!
  accessKey: String!
  name: String!
  draft: Boolean!
  startTime: Float
  endTime: Float
  about: String
  myRole: String
  tags: [String!]
  references: [String!]
  team: Team
  creator: User
  users: [UserProject!]
  skills: [AssignedSkill!]
}

input ProjectInput {
  id: ID
  name: String
  draft: Boolean
  startTime: Float
  endTime: Float
  about: String
  tags: [String!]
  references: [String!]
  skills: [AssignedSkillInput!]
}

type ProjectMember {
  user: User!
  external: Boolean
  availability: [UserAvailability!]!
  coveredSkills: [AssignedSkill!]!
  avgAvailability: Float!

  # How fit some is for the project in terms of skills / availability
  fit: Float!
}

type Query {
  # Check team credentials availability
  checkTeamCredentialsAvailable(id: ID, alias: String): Boolean!

  # Returns team information by id or alias
  team(id: ID, alias: String): Team!

  # Returns skill types for a specific team
  teamSkillTypes(teamId: ID = ""): [TeamSkillType!]!

  # Returns team members for a specific team
  teamMembers(id: ID, alias: String, skillArea: String, textFilter: String): [UserTeam!]!

  # Returns info about a specific team invitation
  invitationInfo(key: String = ""): InvitationInfo!
  checkCredentialsAvailable(login: String, alias: String): Boolean!
  user(id: String, alias: String): User
  userAvailability(startTime: Float, endTime: Float): [UserAvailability!]!
  suggestedBlogs: [BlogEntry!]!
  userAvailabilitySummary(year: Int = 0): UserAvailabilitySummary!
  personalNotes: [PersonalNote!]!

  # Returns skills in the public database
  skills(type: String, name: String, exclude: [String!], limit: Int, exact: Boolean, onlyTypes: [String!]): [Skill!]!

  # Returns skills for a specific user
  userSkills(type: String, userId: String): [UserSkill!]!

  # Returns the unique skills of the team members, with the `strength` summed up
  teamSkills(type: String = "", team: ID = "", skillArea: String, textFilter: String, showing: String): TeamSkills!

  # Returns team member drill-down by a specific skill
  teamSkill(skill: String = "", team: ID = ""): [UserSkillWithUserInfo!]!

  # Returns project skills
  projectSkills(type: String = "", project: ID = "", accessKey: String): TeamSkills!
  project(id: ID, accessKey: String): Project!

  # The `user` parameter in these records is the project owner
  teamProjects(id: ID = ""): [UserProject!]!
  projectMembers(id: ID = "", startTime: Float, endTime: Float, skills: [String!], textFilter: String): [ProjectMember!]!
  suggestProjectMembers(id: ID = "", startTime: Float = 0, endTime: Float = 0, skills: [String!] = [], textFilter: String): [ProjectMember!]!
  projectMemberAvailabilityTimeline(id: ID = "", accessKey: String, startTime: Float = 0, endTime: Float = 0, users: [String!] = []): [UserAvailability!]!
}

type Skill {
  id: ID!
  name: String!
  type: String!
  icon: String
  custom: Boolean
}

input SkillInput {
  name: String = ""
  type: String = ""
}

type Team {
  id: ID!
  name: String!
  alias: String!
  avatar: String
  about: String
  website: String
  locations: [String!]
  skillAreas: [String!]
  myRole: String
  users: [UserTeam!]
  projects: [TeamProject!]
  invites: [InvitedUser!]
  skillTypes: [TeamSkillType!]
  plan: String
}

input TeamInput {
  id: ID
  name: String
  alias: String
  about: String
  website: String
  locations: [String!]
  skillAreas: [String!]
}

input TeamMemberInput {
  teamId: ID!
  id: ID!
  role: String
  external: Boolean
}

type TeamProject {
  team: Team!
  project: Project!
}

type TeamSkills {
  skills: [AggregatedSkill!]!
  userCount: Float!
}

input TeamSkillsInput {
  skills: [String!] = []
  type: String = ""
}

type TeamSkillType {
  id: ID!
  name: String!
  visualization: String!
  team: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TeamSkillTypeInput {
  id: ID
  name: String
  visualization: String
}

type User {
  id: ID!
  name: String
  login: String
  authProvider: String
  emailVerified: Boolean
  alias: String
  avatar: String
  me: Boolean
  skillArea: String
  publicProfile: Boolean
  about: String
  jobTitle: String
  location: String
  links: [String!]
  references: [String!]
  activeTeam: String
  teams: [UserTeam!]
  projects: [UserProject!]
  pinnedSkillType: String
  jobExperience: [UserJobExperience!]
  projectUtilizationViewMonths: Float!
}

type UserAvailability {
  id: ID!
  startTime: Float!
  endTime: Float!
  daysOfWeek: [Int!]
  percentAway: Float!
  type: String!
}

input UserAvailabilityInput {
  startTime: Float = 0
  endTime: Float = 0
  daysOfWeek: [Int!]
  percentAway: Float = 0
  type: String = ""
}

type UserAvailabilitySummary {
  # Percent of the business time user is available each month
  monthSummaries: [Float!]!
  vacationDaysSet: Int!
  projectUtilization: Float!
}

input UserInput {
  name: String
  alias: String
  skillArea: String
  joinedMailingList: Boolean
  publicProfile: Boolean
  about: String
  jobTitle: String
  location: String
  links: [String!]
  references: [String!]
  activeTeam: String
  pinnedSkillType: String
  jobExperience: [UserJobExperienceInput!]
  projectUtilizationViewMonths: Float
}

type UserJobExperience {
  team: String
  customName: String
  startTime: Float
  endTime: Float
}

input UserJobExperienceInput {
  team: String
  customName: String
  startTime: Float
  endTime: Float
}

type UserProject {
  user: User!
  project: Project!
  role: String!
}

type UserSkill {
  skill: Skill!
  strength: Float!
  sortOrder: Float!
  modifiedTime: Float
  user: String!
}

type UserSkillWithUserInfo {
  skill: Skill!
  strength: Float!
  sortOrder: Float!
  modifiedTime: Float
  user: User!
}

type UserTeam {
  user: User!
  team: Team!
  role: String!
  external: Boolean
  skillArea: String
  location: String
  directManager: [ID!]
}

input UserTeamInput {
  teamId: ID!
  skillArea: String
  location: String
  directManager: [ID!]
}
